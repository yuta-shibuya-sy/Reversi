---
import { path } from "../path";
---

<div class="outside">
  <div class="wrapper">
    <div class="game">
      <h3 class="turn">
        <div class="text">turn：</div>
        <div class="color"></div>
        <div class="player"></div>
      </h3>
      <div class="game-board">
        <div class="flex">
          <p class="frame top left left-top-corner">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame top">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame top">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame top">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame top">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame top">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame top">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame top right right-top-corner">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
        </div>
        <div class="flex">
          <p class="frame left">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame right">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
        </div>
        <div class="flex">
          <p class="frame left">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame right">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
        </div>
        <div class="flex">
          <p class="frame left">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame right">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
        </div>
        <div class="flex">
          <p class="frame left">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame right">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
        </div>
        <div class="flex">
          <p class="frame left">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame right">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
        </div>
        <div class="flex">
          <p class="frame left">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame right">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
        </div>
        <div class="flex">
          <p class="frame bottom left left-bottom-corner">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame bottom">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame bottom">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame bottom">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame bottom">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame bottom">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame bottom">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
          <p class="frame bottom right right-bottom-corner">
            <span class="piece cursor"></span><span class="piece-pointer"
            ></span>
          </p>
        </div>
      </div>
    </div>
  </div>

  <div class="pass">
    <div class="pass-text">
      <p class="pass-player-color"></p>
      <p>Pass</p>
    </div>
  </div>

  <div class="result">
    <div class="result-inside">
      <div class="result-white">
        <p class="result-text"></p>
        <p class="result-color">White</p>
        <p class="result-name"></p>
        <p class="score">0</p>
      </div>
      <div class="underbar">-</div>
      <div class="result-black">
        <p class="result-text"></p>
        <p class="result-color">Black</p>
        <p class="result-name"></p>
        <p class="score">0</p>
      </div>

      <img class="reset" src={path("/assets/reset_button.jpg")} />
    </div>
  </div>

  <div class="result-screen"></div>
  <div class="clear-screen"></div>
</div>

<style>
  /* common
  --------------- */
  .outside {
    position: relative;
  }

  /* game
  --------------- */
  .wrapper {
    max-width: 100vw;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    margin: auto;
  }

  .game .turn {
    font-size: 2rem;
    margin-bottom: 15px;
    display: flex;
    justify-content: center;
    align-items: center;
    font-family: Cambria, Cochin, Georgia, Times, "Times New Roman", serif;
  }

  .game .turn .color {
    margin-right: 5px;
  }

  /* game-board */
  .game-board .flex {
    display: flex;
  }

  .game-board .frame {
    width: 65px;
    height: 65px;
    background-color: #7aff8c;
    border: solid 1px #000;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: all 1s;
    position: relative;
  }

  /* 駒 */
  .game-board .frame .piece {
    width: 45px;
    height: 45px;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 20;
  }

  /* カーソル */
  .game-board .frame:hover .cursor {
    border: solid 3px #f9ff3a;
  }

  .white-color .frame:hover .cursor {
    background-color: #fff;
    opacity: 0.8;
  }

  .black-color .frame:hover .cursor {
    background-color: #000;
    opacity: 0.8;
  }

  .game-board .frame .white {
    background-color: #fff;
  }

  .game-board .frame .black {
    background-color: #000;
  }

  /* ポインター */
  .game-board .frame .piece-pointer {
    width: 10px;
    height: 10px;
    border-radius: 50%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 10;
  }

  .game-board .frame .pointer {
    background-color: #a0a0a0;
  }

  /* 枠線の統一 */
  .game-board .top {
    border-top: solid 2px #000;
  }

  .game-board .left {
    border-left: solid 2px #000;
  }

  .game-board .right {
    border-right: solid 2px #000;
  }

  .game-board .bottom {
    border-bottom: solid 2px #000;
  }

  /* 角 */
  .game-board .left-top-corner {
    border-radius: 10px 0 0 0;
  }

  .game-board .right-top-corner {
    border-radius: 0 10px 0 0;
  }

  .game-board .left-bottom-corner {
    border-radius: 0 0 0 10px;
  }

  .game-board .right-bottom-corner {
    border-radius: 0 0 10px 0;
  }

  /* パス
  --------------- */
  .pass {
    width: 100%;
    height: 100%;
    z-index: 100;
    display: none;
    justify-content: center;
    align-items: center;
    position: absolute;
    top: 0;
    right: 0;
    transition: all 1s;
    opacity: 0;
  }

  .pass-text {
    background-color: #f6f6f6;
    font-size: 50px;
    font-weight: 900;
    font-family: Cambria, Cochin, Georgia, Times, "Times New Roman", serif;
    text-align: center;
    padding: 20px 70px;
    border-radius: 10px;
    border: solid 2px #586365;
  }

  .pass-player-color {
    font-size: 45px;
  }

  /* 結果
  --------------- */
  .result {
    width: 100%;
    height: 100%;
    z-index: 100;
    display: none;
    justify-content: center;
    align-items: center;
    position: absolute;
    top: 0;
    right: 0;
    transition: all 1s;
    opacity: 0;
  }

  .result-inside {
    background-color: #f6f6f6;
    font-family: Cambria, Cochin, Georgia, Times, "Times New Roman", serif;
    display: flex;
    text-align: center;
    border-radius: 10px;
    border: solid 2px #586365;
    position: relative;
  }

  .result-white,
  .result-black {
    font-size: 40px;
    font-weight: 900;
    width: 160px;
    padding: 20px;
    margin: 5px;
    border-radius: 10px;
  }

  .underbar {
    font-size: 50px;
    font-weight: 900;
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 0 10px;
  }

  .result-text {
    font-size: 40px;
    margin-bottom: 8px;
  }
  .result-color {
    font-size: 30px;
  }

  .result-name,
  .score {
    font-size: 25px;
    margin-bottom: 5px;
  }

  .winner {
    background-color: #ffe67d;
    animation: change-color-anim 1.5s linear infinite;
  }

  @keyframes change-color-anim {
    0%,
    100% {
      background-color: #ffe67d;
    }
    50% {
      background-color: #f6f6f6;
    }
  }

  /* リセット */
  .reset {
    position: absolute;
    top: -50px;
    right: 0;
    width: 30px;
    height: 25px;
    background-color: #f6f6f6;
    padding: 8px;
    border: solid 2px #586365;
    border-radius: 10px;
    transition: all 1s;
    opacity: 0;
    display: none;
  }

  .reset:hover {
    opacity: 0.8;
  }

  .reset:active {
    background-color: #ffe67d;
  }

  /* 選択不可 & 暗幕
  --------------- */
  .result-screen,
  .clear-screen {
    width: 100%;
    height: 100%;
    display: none;
    z-index: 100;
    position: absolute;
    top: 0;
    right: 0;
    transition: all 0.5s;
    opacity: 0;
    background-color: #404040;
  }

  /* スマホ対応
  ---------------*/
  @media (max-width: 510px) {
    .game .turn {
      font-size: 1.5rem;
    }

    /* 駒 
    ---------------*/
    .game-board .frame {
      width: 45px;
      height: 45px;
    }

    .game-board .frame .piece {
      width: 30px;
      height: 30px;
    }

    .game-board .frame .piece-pointer {
      width: 7px;
      height: 7px;
    }

    /* パス
    --------------- */
    .pass-text {
      font-size: 35px;
    }
    .pass-player-color {
      font-size: 30px;
    }

    /* 結果
    --------------- */
    .result-white,
    .result-black {
      font-size: 20px;
      width: 70px;
      padding: 10px;
      margin: 5px;
    }

    .underbar {
      font-size: 35px;
      margin: 0;
    }

    .result-text {
      font-size: 20px;
      margin-bottom: 8px;
    }
    .result-color {
      font-size: 20px;
    }

    .result-name,
    .score {
      font-size: 15px;
      margin-bottom: 5px;
    }

    .reset {
      top: -40px;
      width: 17px;
      height: 15px;
    }
  }

  @media (max-width: 380px) {
    .game .turn {
      font-size: 1.3rem;
    }
    .game-board .frame {
      width: 40px;
      height: 40px;
    }

    .game-board .frame .piece {
      width: 25px;
      height: 25px;
    }
  }

  @media (max-width: 320px) {
    .game-board .frame {
      width: 30px;
      height: 30px;
    }

    .game-board .frame .piece {
      width: 20px;
      height: 20px;
    }
  }
</style>

<script>
  const game_start_button =
    document.querySelector<HTMLElement>(".game-start-button");
  const game_board_color = document.querySelector<HTMLElement>(".game-board");

  const frame = document.querySelectorAll<HTMLElement>(".frame");
  const cursor = document.querySelectorAll<HTMLElement>(".cursor");
  const piece = document.querySelectorAll<HTMLElement>(".piece");
  const pointer = document.querySelectorAll<HTMLElement>(".piece-pointer");

  const white = 1;
  const black = 2;
  let now_player_color = 0;

  // ゲームボード　白＝1、黒＝2
  let game_board = [
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 2, 0, 0, 0],
    [0, 0, 0, 2, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
  ];

  let eight_reversi_count = [];
  const eight_directions_coordinate = [
    [-1, 0],
    [-1, 1],
    [0, 1],
    [1, 1],
    [1, 0],
    [1, -1],
    [0, -1],
    [-1, -1],
  ];

  // 初期設定(ゲームの開始時に行う事)
  game_start_button.addEventListener("click", function () {
    setTimeout(function () {
      // ターンの初期設定
      initialization_turn();
      // ゲームボードの初期設定
      initialization_game_board();
      // AI
      initialization_AI();
    }, 1500);
  });

  // ターンの初期設定
  function initialization_turn() {
    const card_player = document.querySelector<HTMLElement>(".card-player");
    const card_color = document.querySelector<HTMLElement>(".card-color");
    const player = document.querySelector<HTMLElement>(".player");
    const color = document.querySelector<HTMLElement>(".color");

    // 駒の色の表示
    color.textContent = card_color.getAttribute("color-value");
    if (card_color.getAttribute("color-value") == "white") {
      now_player_color = white;
      // カーソルの色変更
      game_board_color.classList.add("white-color");
    } else if (card_color.getAttribute("color-value") == "black") {
      now_player_color = black;
      // カーソルの色変更
      game_board_color.classList.add("black-color");
    }

    // コンピュータ対戦の際、わかりやすく表示する。
    if (card_player.getAttribute("player-value") != "") {
      player.textContent = "(" + card_player.getAttribute("player-value") + ")";
    }
  }

  // ゲームボードの初期設定
  function initialization_game_board() {
    for (var i = 0; i < piece.length; i++) {
      piece[i].setAttribute("data-value", String(i));
    }
    game_board_change();
    put_pointer();
  }

  function initialization_AI() {
    const player = document.querySelector<HTMLElement>(".player");

    if (player.textContent == "(computer)") {
      setTimeout(function () {
        AI();
      }, 5500);
      not_available(5500);
    }
  }

  // 簡単な対戦相手の作成(先を読む事は出来ない)
  function AI() {
    const ai_area = [];
    let ai_coordinate = 0;

    // 置く事が出来る座標とひっくり返す枚数の保存
    for (let i = 0; i < 64; i++) {
      if (pointer[i].classList.contains("pointer")) {
        eight_reversi_count = eight_directions_search(i);
        let ai_count = 0;
        for (let j = 0; j < eight_reversi_count.length; j++) {
          ai_count += eight_reversi_count[j];
        }
        ai_area.push({
          coordinate: i,
          count: ai_count,
        });
      }
    }

    // どこに置くかの決定
    let random = Math.floor(Math.random() * (10 - 1 + 1)) + 1;
    if (random > 2) {
      let max_area = [ai_area[0].coordinate];
      let ai_max_count = [ai_area[0].count];
      for (let i = 1; i < ai_area.length; i++) {
        if (ai_max_count[0] < ai_area[i].count) {
          let max_area = [ai_area[i].coordinate];
          let ai_max_count = [ai_area[1].count];
        } else if (ai_max_count[0] == ai_area[i].count) {
          max_area.push(ai_area[i].coordinate);
          ai_max_count.push(ai_area[1].count);
        }
      }
      if (max_area.length > 1) {
        random = Math.floor(Math.random() * (max_area.length - 1 + 1));
        ai_coordinate = max_area[random];
      } else {
        ai_coordinate = max_area[0];
      }
    } else {
      random = Math.floor(Math.random() * (ai_area.length - 1 + 1));
      ai_coordinate = ai_area[random].coordinate;
    }

    put_event(ai_coordinate);
  }

  // 駒を置くイベント
  for (let i = 0; i < 64; i++) {
    frame[i].addEventListener("click", function () {
      // 駒を置く
      put_event(i);

      const white_count = document.querySelectorAll<HTMLElement>(".white");
      const black_count = document.querySelectorAll<HTMLElement>(".black");
      if (white_count.length + black_count.length < 64) {
        // AI
        const player = document.querySelector<HTMLElement>(".player");
        if (player.textContent == "(computer)") {
          setTimeout(function () {
            AI();
          }, 1500);
          not_available(2000);
        } else if (player.textContent == "") {
          not_available(750);
        }
      }
      winner_judge();
    });
  }

  // 駒を置く
  function put_event(number) {
    let coordinate = coordinate_chage(number);
    let dy = coordinate[0];
    let dx = coordinate[1];
    if (pointer[number].classList.contains("pointer")) {
      game_board[dy][dx] = now_player_color;
      eight_reversi_count = eight_directions_search(number);
      for (let j = 0; j < eight_reversi_count.length; j++) {
        dy = coordinate[0];
        dx = coordinate[1];

        // ゲームボードの変更
        for (let k = 0; k < eight_reversi_count[j]; k++) {
          dy += eight_directions_coordinate[j][0];
          dx += eight_directions_coordinate[j][1];
          game_board[dy][dx] = now_player_color;
        }
      }

      turn_change();
      reset_pointer();
      game_board_change();
      put_pointer();
      pass_judge();
    }
  }

  // ターンの表示変更
  function turn_change() {
    const color = document.querySelector<HTMLElement>(".color");
    const player = document.querySelector<HTMLElement>(".player");
    if (now_player_color == white) {
      now_player_color = black;
      color.textContent = "black";
      // カーソルの色変更
      game_board_color.classList.remove("white-color");
      game_board_color.classList.add("black-color");
    } else if (now_player_color == black) {
      now_player_color = white;
      color.textContent = "white";
      // カーソルの色変更
      game_board_color.classList.remove("black-color");
      game_board_color.classList.add("white-color");
    }

    // コンピュータ対戦の際、わかりやすく表示する。
    if (player.textContent == "(you)") {
      player.textContent = "(computer)";
    } else if (player.textContent == "(computer)") {
      player.textContent = "(you)";
    }
  }

  // 盤面(ゲームボード)の変更
  function game_board_change() {
    for (var i = 0; i < 8; i++) {
      for (var j = 0; j < 8; j++) {
        let total = i * 8 + j;
        if (game_board[i][j] == white) {
          if (piece[total].classList.contains("black")) {
            piece[total].classList.remove("black");
          }
          piece[total].classList.add("white");
          piece[total].classList.remove("cursor");
        } else if (game_board[i][j] == black) {
          if (piece[total].classList.contains("white")) {
            piece[total].classList.remove("white");
          }
          piece[total].classList.add("black");
          piece[total].classList.remove("cursor");
        }
      }
    }
  }

  // ポインターの設置
  function put_pointer() {
    for (let i = 0; i < 64; i++) {
      let coordinate = coordinate_chage(i);
      let dy = coordinate[0];
      let dx = coordinate[1];
      if (game_board[dy][dx] == 0) {
        eight_reversi_count = eight_directions_search(i);

        // ひっくり返す事が出来るならポインターを置く
        let count = 0;
        for (let j = 0; j < eight_reversi_count.length; j++) {
          count += eight_reversi_count[j];
        }
        if (count > 0) {
          pointer[i].classList.add("pointer");
        }
      }
    }
  }

  // ポインター(置けるマスの表示)のリセット
  function reset_pointer() {
    for (let i = 0; i < pointer.length; i++) {
      if (pointer[i].classList.contains("pointer")) {
        pointer[i].classList.remove("pointer");
      }
    }
  }

  // 八方向それぞれの返す事で出来る枚数を調べる
  function eight_directions_search(piece_number: Number) {
    let coordinate = coordinate_chage(piece_number);
    let dy = coordinate[0];
    let dx = coordinate[1];

    let eight_reversi_count = [];

    // 8方向探索
    for (let j = 0; j < 8; j++) {
      // 1方向の探索(上から右回り)
      let one_direction = [];
      dy = coordinate[0];
      dx = coordinate[1];
      one_direction.push(now_player_color);
      for (let k = 0; k < 8; k++) {
        dy += eight_directions_coordinate[j][0];
        dx += eight_directions_coordinate[j][1];

        if (dy < 0 || dy > 7 || dx < 0 || dx > 7 || game_board[dy][dx] == 0) {
          break;
        } else {
          one_direction.push(game_board[dy][dx]);
        }
      }

      // ひっくり返す枚数の探索
      let head_piece = one_direction[0];
      let tail_piece = 0;
      let count = 0;
      for (let k = 1; k < one_direction.length; k++) {
        tail_piece = one_direction[k];
        if (head_piece == tail_piece) {
          break;
        } else {
          count += 1;
        }
      }
      if (head_piece != tail_piece) {
        count = 0;
      }
      eight_reversi_count.push(count);
    }

    // 8方向それぞれの返す事が出来る枚数の配列として返す
    return eight_reversi_count;
  }

  // 数値を座標に変更する
  function coordinate_chage(piece_number: Number) {
    let coordinate = piece[Number(piece_number)].getAttribute("data-value");
    let dy = Math.floor(Number(coordinate) / 8);
    let dx = Number(coordinate) % 8;

    // 座標を配列として返す
    return [dy, dx];
  }

  // 選択不可画面表示
  function not_available(time) {
    const clear_screen = document.querySelector<HTMLElement>(".clear-screen");
    clear_screen.style.display = "block";
    setTimeout(function () {
      clear_screen.style.display = "none";
    }, time);
  }

  // パスの判定
  function pass_judge() {
    const check_pointer = document.querySelectorAll<HTMLElement>(".pointer");
    if (check_pointer.length < 1) {
      turn_change();
      reset_pointer();
      game_board_change();
      put_pointer();

      // もう一度同じ事をやる
      const check_pointer = document.querySelectorAll<HTMLElement>(".pointer");
      const white_count = document.querySelectorAll<HTMLElement>(".white");
      const black_count = document.querySelectorAll<HTMLElement>(".black");
      if (white_count.length + black_count.length != 64) {
        if (check_pointer.length < 1) {
          result_indication();
        } else {
          pass_indication();
        }
      }
    }
  }

  // パス画面の表示
  function pass_indication() {
    const pass = document.querySelector<HTMLElement>(".pass");
    const pass_player_color =
      pass.querySelector<HTMLElement>(".pass-player-color");
    pass.style.display = "flex";
    if (now_player_color == white) {
      pass_player_color.textContent = "Black";
    } else if (now_player_color == black) {
      pass_player_color.textContent = "white";
    }
    not_available(500);

    // パスの表示非表示
    setTimeout(function () {
      pass.style.opacity = "1";
    }, 100);
    setTimeout(function () {
      pass.style.opacity = "0";
    }, 1600);
    setTimeout(function () {
      pass.style.display = "none";
    }, 2700);
  }

  // ゲーム終了判定
  function winner_judge() {
    const white_count = document.querySelectorAll<HTMLElement>(".white");
    const black_count = document.querySelectorAll<HTMLElement>(".black");
    if (white_count.length + black_count.length > 63) {
      result_indication();
    }
  }

  // 結果画面の表示
  function result_indication() {
    const white_count = document.querySelectorAll<HTMLElement>(".white");
    const black_count = document.querySelectorAll<HTMLElement>(".black");
    const result_screen = document.querySelector<HTMLElement>(".result-screen");

    // 暗幕表示
    result_screen.style.display = "block";
    setTimeout(function () {
      result_screen.style.opacity = "1";
    }, 1000);
    setTimeout(function () {
      result_screen.style.opacity = "0";
    }, 1500);
    setTimeout(function () {
      result_screen.style.display = "none";
    }, 2200);

    setTimeout(function () {
      const turn = document.querySelector<HTMLElement>(".turn");
      const turn_color = turn.querySelector<HTMLElement>(".color");
      const turn_player = turn.querySelector<HTMLElement>(".player");

      // 暗幕の間に盤面のリセット(白紙)にする。
      turn.style.display = "none";
      for (let i = 0; i < 8; i++) {
        for (let j = 0; j < 8; j++) {
          game_board[i][j] = 0;
          let total = i * 8 + j;
          piece[total].classList.remove("black");
          piece[total].classList.remove("white");
          piece[total].classList.remove("cursor");
        }
      }
      game_board_change();

      // 駒の再配置(綺麗に並べる)
      let result_white_count = 63;
      let result_black_count = 0;
      for (let i = 0; i < white_count.length + black_count.length; i++) {
        let white_dy = Math.floor(Number(result_white_count) / 8);
        let white_dx = Number(result_white_count) % 8;
        let black_dy = Math.floor(Number(result_black_count) / 8);
        let black_dx = Number(result_black_count) % 8;

        if (
          white_count.length > 0 &&
          white_count.length > 63 - result_white_count
        ) {
          setTimeout(function () {
            game_board[white_dy][white_dx] = white;
            game_board_change();
          }, i * 75 + 700);
          result_white_count -= 1;
        }

        if (black_count.length > 0 && black_count.length > result_black_count) {
          setTimeout(function () {
            game_board[black_dy][black_dx] = black;
            game_board_change();
          }, i * 75 + 700);
          result_black_count += 1;
        }
      }

      // 上記の処理(駒の再配置)が終わってから結果画面を表示する
      setTimeout(function () {
        const game_wrapper = document.querySelector<HTMLElement>(".wrapper");
        const result_score_screen =
          document.querySelector<HTMLElement>(".result");

        // 白色の結果画面
        const result_white =
          document.querySelector<HTMLElement>(".result-white");
        const result_white_text =
          result_white.querySelector<HTMLElement>(".result-text");
        const result_white_name =
          result_white.querySelector<HTMLElement>(".result-name");
        const result_white_score =
          result_white.querySelector<HTMLElement>(".score");

        // 黒色の結果表示画面
        const result_black =
          document.querySelector<HTMLElement>(".result-black");
        const result_black_text =
          result_black.querySelector<HTMLElement>(".result-text");
        const result_black_name =
          result_black.querySelector<HTMLElement>(".result-name");
        const result_black_score =
          result_black.querySelector<HTMLElement>(".score");
        const reset = document.querySelector<HTMLElement>(".reset");

        // 背景のぼかし & カーソルが反応しないための暗幕表示
        result_score_screen.style.display = "flex";
        setTimeout(function () {
          game_wrapper.style.filter = "blur(5px)";
          result_score_screen.style.opacity = "1";
        }, 250);

        // 結果表示
        if (white_count.length > black_count.length) {
          result_white.classList.add("winner");
          result_white_text.textContent = "Winner";
          result_black_text.textContent = "Lose";
        } else if (white_count.length < black_count.length) {
          result_black.classList.add("winner");
          result_black_text.textContent = "Winner";
          result_white_text.textContent = "Lose";
        } else {
          result_black_text.textContent = "Draw";
          result_white_text.textContent = "Draw";
        }

        if (turn_player.textContent == "(you)") {
          if (turn_color.textContent == "black") {
            result_white_name.textContent = "(Computer)";
            result_black_name.textContent = "(You)";
          } else if (turn_color.textContent == "white") {
            result_white_name.textContent = "(You)";
            result_black_name.textContent = "(Computer)";
          }
        } else if (turn_player.textContent == "(computer)") {
          if (turn_color.textContent == "black") {
            result_white_name.textContent = "(Computer)";
            result_black_name.textContent = "(You)";
          } else if (turn_color.textContent == "white") {
            result_white_name.textContent = "(You)";
            result_black_name.textContent = "(Computer)";
          }
        }

        // スコアに動きを付ける
        setTimeout(function () {
          for (let i = 0; i < white_count.length; i++) {
            setTimeout(function () {
              result_white_score.textContent = String(i + 1);
            }, i * 20 + 1500);
          }
          for (let j = 0; j < black_count.length; j++) {
            setTimeout(function () {
              result_black_score.textContent = String(j + 1);
            }, j * 20 + 1500);
          }
        }, 500);

        // リセットボタンの表示
        setTimeout(function () {
          reset.style.display = "block";
        }, 3000);
        setTimeout(function () {
          reset.style.opacity = "1";
        }, 4000);
      }, (white_count.length + black_count.length) * 75);
    }, 1500);
  }

  // リセットボタン
  const reset = document.querySelector<HTMLElement>(".reset");
  reset.addEventListener("click", function () {
    location.reload();
  });
</script>
